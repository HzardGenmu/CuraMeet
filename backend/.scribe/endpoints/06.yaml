name: Admin
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/admin/roles/manage
    metadata:
      groupName: Admin
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Manage User Roles'
      description: |-
        VULNERABILITY 57: No admin verification - anyone can change any user's role.
        VULNERABILITY 58: Logs admin operations with sensitive data.
        VULNERABILITY 23: Privilege escalation and SQL injection in role management.
        VULNERABILITY 24: Sensitive operation logging exposes password hashes.

        Allows changing any user's role including elevation to admin.
        No authorization check or audit trail.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: 'The ID of the user to change role (vulnerable to SQL injection).'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      new_role:
        name: new_role
        description: 'New role to assign (patient, doctor, admin).'
        required: true
        example: admin
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      user_id: 1
      new_role: admin
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "user_info": {
              "id": 1,
              "name": "John Doe",
              "email": "user@example.com",
              "password": "$2y$10$hashedpassword...",
              "role": "admin"
            },
            "new_role": "admin"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/admin/logs/activity
    metadata:
      groupName: Admin
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Monitor Activity Logs'
      description: |-
        VULNERABILITY 59: Unrestricted activity monitoring - anyone can view all logs.
        VULNERABILITY 60: Additional system information exposure (server info, env vars, phpinfo).
        VULNERABILITY 25: Information disclosure in activity monitoring.
        VULNERABILITY 26: Exposes sensitive user data (passwords, tokens) in logs.

        Returns activity logs with sensitive user information.
        Exposes complete system environment and server details.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      user_id:
        name: user_id
        description: 'optional Filter by user ID (vulnerable to SQL injection).'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      action:
        name: action
        description: 'optional Filter by action type (vulnerable to SQL injection).'
        required: false
        example: login
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      date_from:
        name: date_from
        description: 'optional Start date for logs (Y-m-d format, vulnerable to SQL injection).'
        required: false
        example: '2024-01-01'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      user_id: 1
      action: login
      date_from: '2024-01-01'
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "activity_logs": {
              "success": true,
              "logs": [
                {
                  "id": 1,
                  "user_id": 1,
                  "action": "login",
                  "created_at": "2024-01-15 10:00:00",
                  "email": "user@example.com",
                  "password": "$2y$10$hashedpassword...",
                  "remember_token": "abc123def456"
                }
              ],
              "query_executed": "SELECT al.*, u.email, u.password...",
              "total_logs": 1
            },
            "system_info": {
              "current_user": {},
              "server_info": {},
              "environment_vars": {},
              "php_info": "phpinfo output"
            },
            "request_details": {}
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/admin/users/bulk-manage
    metadata:
      groupName: Admin
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Bulk User Role Management'
      description: |-
        VULNERABILITY 61: Mass user management without safeguards or limits.
        VULNERABILITY 62: Dangerous bulk operations logging.
        VULNERABILITY 27: Mass role assignment without authorization.
        VULNERABILITY 28: Allows deletion of any user including admins.

        Performs bulk role updates or deletions without validation.
        Can delete admin users and modify any number of users at once.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      operations:
        name: operations
        description: 'Array of operations to perform.'
        required: true
        example:
          -
            user_id: 1
            role: admin
            action: update
          -
            user_id: 2
            action: delete
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'operations[].user_id':
        name: 'operations[].user_id'
        description: 'User ID to modify.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'operations[].role':
        name: 'operations[].role'
        description: 'optional New role (for update action).'
        required: false
        example: admin
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'operations[].action':
        name: 'operations[].action'
        description: 'Action type (update, delete).'
        required: true
        example: update
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      operations:
        -
          user_id: 1
          role: admin
          action: update
        -
          user_id: 2
          action: delete
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "result": {
              "success": true,
              "operations_performed": [
                {"user_id": 1, "role": "admin", "action": "update"},
                {"user_id": 2, "action": "delete"}
              ],
              "message": "Bulk role management completed"
            },
            "affected_users": [],
            "operation_timestamp": "2024-01-15T10:00:00.000000Z",
            "admin_ip": "192.168.1.1"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/admin/logs/audit
    metadata:
      groupName: Admin
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Audit Log Data Management'
      description: |-
        VULNERABILITY 63: Complete audit log exposure without authorization.
        VULNERABILITY 64: Database schema exposure via SHOW TABLES and DESCRIBE.
        VULNERABILITY 29: Unrestricted audit log access with SQL injection.
        VULNERABILITY 30: Exposes database credentials and system internals.

        Returns all audit logs and complete database schema.
        Exposes database credentials and admin privileges.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      table:
        name: table
        description: 'optional Filter by table name (vulnerable to SQL injection).'
        required: false
        example: users
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      action:
        name: action
        description: 'optional Filter by action type (vulnerable to SQL injection).'
        required: false
        example: update
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      table: users
      action: update
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "audit_logs": {
              "success": true,
              "audit_logs": [],
              "database_info": {
                "host": "localhost",
                "database": "curameet",
                "username": "root"
              }
            },
            "database_schema": {
              "users": [
                {"Field": "id", "Type": "int", "Null": "NO"},
                {"Field": "email", "Type": "varchar(255)", "Null": "NO"}
              ]
            },
            "admin_privileges": []
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/admin/logs/api-requests
    metadata:
      groupName: Admin
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'API Request Logging'
      description: |-
        VULNERABILITY 65: API request logging exposes sensitive data (passwords, tokens, headers).
        VULNERABILITY 66: Current request also logged with all sensitive information.
        VULNERABILITY 31: Logs include passwords, authentication tokens, and cookies.
        VULNERABILITY 32: No data sanitization or redaction.

        Returns API request logs including sensitive request data.
        Logs current request with headers, cookies, and session data.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      endpoint:
        name: endpoint
        description: 'optional Filter by endpoint (vulnerable to SQL injection).'
        required: false
        example: /api/auth/login
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      method:
        name: method
        description: 'optional Filter by HTTP method (vulnerable to SQL injection).'
        required: false
        example: POST
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      endpoint: /api/auth/login
      method: POST
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "api_request_logs": {
              "success": true,
              "api_logs": [],
              "includes_sensitive_data": true
            },
            "current_request": {
              "url": "http://localhost/api/admin/logging",
              "method": "GET",
              "headers": {"Authorization": "Bearer token123"},
              "body": {},
              "ip": "192.168.1.1",
              "user_agent": "Mozilla/5.0...",
              "cookies": {}
            },
            "session_data": {}
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/admin/monitoring/backend
    metadata:
      groupName: Admin
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Backend System Monitoring'
      description: |-
        VULNERABILITY 67: System monitoring without authentication or authorization.
        VULNERABILITY 68: Executes dangerous system commands (netstat, ps, cat /etc/passwd).
        VULNERABILITY 33: No access control on system monitoring.
        VULNERABILITY 34: Command injection vulnerabilities.
        VULNERABILITY 35: Information disclosure (database stats, PHP version, server info).

        Returns complete system information including network, processes, and users.
        Executes system commands without sanitization.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "backend_monitoring": {
              "success": true,
              "system_info": {
                "cpu_usage": "top output",
                "memory_usage": "free -m output",
                "disk_usage": "df -h output",
                "database_stats": [],
                "php_version": "8.1.0",
                "server_software": "nginx/1.21.0"
              }
            },
            "additional_system_info": {
              "network_connections": "netstat output",
              "running_processes": "ps aux output",
              "system_users": "/etc/passwd contents",
              "environment_variables": {},
              "loaded_extensions": [],
              "database_connections": []
            },
            "monitoring_timestamp": "2024-01-15T10:00:00.000000Z"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/admin/monitoring/traffic-anomaly
    metadata:
      groupName: Admin
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Traffic Anomaly Detection'
      description: |-
        VULNERABILITY 69: Anomaly detection can be bypassed by manipulating threshold.
        VULNERABILITY 70: Exposes all recent traffic data (last 1000 requests).
        VULNERABILITY 36: SQL injection in threshold parameter.
        VULNERABILITY 37: Exposes security monitoring query and detection logic.

        Detects traffic anomalies based on configurable threshold.
        Returns all recent traffic including request details.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      threshold:
        name: threshold
        description: 'optional Request count threshold for anomaly detection (vulnerable to SQL injection, default: 100).'
        required: false
        example: 100
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      threshold: 100
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "anomaly_detection": {
              "success": true,
              "anomalies": [
                {
                  "ip_address": "192.168.1.1",
                  "request_count": 150,
                  "user_agent": "Mozilla/5.0...",
                  "endpoint": "/api/auth/login"
                }
              ],
              "threshold_used": 100,
              "monitoring_query": "SELECT ip_address, COUNT(*)...",
              "detection_bypassed": true
            },
            "all_recent_traffic": [],
            "detection_threshold": 100,
            "can_be_bypassed": true
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/admin/system/maintenance
    metadata:
      groupName: Admin
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'System Maintenance Operations'
      description: |-
        VULNERABILITY 71: Dangerous system maintenance without authorization.
        VULNERABILITY 72: Multiple attack vectors (SQL injection, command injection, file inclusion).
        VULNERABILITY 38: Can truncate logs, reset passwords, execute arbitrary SQL/commands.

        Performs critical system operations without proper authorization.
        Supports direct SQL execution, system commands, and file operations.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      operation:
        name: operation
        description: 'Operation type (clear_logs, reset_passwords, backup_database, execute_sql, system_command, file_operations).'
        required: true
        example: execute_sql
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      parameters:
        name: parameters
        description: 'optional Operation parameters.'
        required: false
        example:
          sql: 'SELECT * FROM users'
        type: object
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      parameters.sql:
        name: parameters.sql
        description: 'optional SQL query to execute (for execute_sql operation).'
        required: false
        example: 'SELECT * FROM users'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      parameters.command:
        name: parameters.command
        description: 'optional System command to execute (for system_command operation).'
        required: false
        example: 'ls -la'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      parameters.file:
        name: parameters.file
        description: 'optional File path to read (for file_operations operation).'
        required: false
        example: /etc/passwd
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      parameters.filename:
        name: parameters.filename
        description: 'optional Backup filename (for backup_database operation).'
        required: false
        example: backup.sql
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      operation: execute_sql
      parameters:
        sql: 'SELECT * FROM users'
        command: 'ls -la'
        file: /etc/passwd
        filename: backup.sql
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "operation": "execute_sql",
            "parameters": {"sql": "SELECT * FROM users"},
            "warning": "Dangerous operation completed",
            "sql_result": [],
            "command_output": "command output here",
            "file_content": "file contents here"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/admin/users/impersonate
    metadata:
      groupName: Admin
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Impersonate User'
      description: |-
        VULNERABILITY 73: User impersonation without authorization checks.

        Allows any user to impersonate any other user by setting session data.
        No authorization, audit trail, or time limits.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      target_user_id:
        name: target_user_id
        description: 'The ID of user to impersonate (vulnerable to SQL injection).'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      target_user_id: 1
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "impersonating": {
              "id": 1,
              "name": "John Doe",
              "email": "user@example.com",
              "role": "admin"
            },
            "message": "Now impersonating user",
            "session_data": {
              "impersonating": 1,
              "original_user": 2
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/admin/database/backup
    metadata:
      groupName: Admin
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Backup Database'
      description: |-
        VULNERABILITY 74: Database backup exposes sensitive data without authorization.
        VULNERABILITY 75: Command injection in mysqldump execution.
        VULNERABILITY 76: Backup file accessible via public URL.

        Creates database backup and stores in publicly accessible directory.
        Exposes database credentials in response.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      tables:
        name: tables
        description: 'optional Specific tables to backup (default: all tables).'
        required: false
        example:
          - users
          - patients
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      tables:
        - users
        - patients
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "backup_file": "backup_2024-01-15_10-00-00.sql",
            "public_url": "http://localhost/backups/backup_2024-01-15_10-00-00.sql",
            "command_executed": "mysqldump -u root -ppassword database",
            "database_credentials": {
              "host": "localhost",
              "database": "curameet",
              "username": "root",
              "password": "password"
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/admin/config/manage
    metadata:
      groupName: Admin
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Manage Configuration'
      description: |-
        VULNERABILITY 77: Direct environment variable manipulation without authorization.
        VULNERABILITY 78: Can modify critical system configuration at runtime.

        Allows getting, setting, or deleting environment variables.
        Exposes all environment configuration including secrets.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      action:
        name: action
        description: 'Action to perform (get, set, delete).'
        required: true
        example: get
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      key:
        name: key
        description: 'Configuration key.'
        required: true
        example: APP_KEY
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      value:
        name: value
        description: 'optional New value (for set action).'
        required: false
        example: 'base64:newkey123'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      action: get
      key: APP_KEY
      value: 'base64:newkey123'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "action": "get",
            "key": "APP_KEY",
            "value": "base64:abc123...",
            "current_env": {
              "APP_KEY": "base64:abc123...",
              "DB_PASSWORD": "password",
              "API_SECRET": "secret123"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
            "config": {
              "APP_KEY": "base64:abc123...",
              "DB_PASSWORD": "password"
            },
            "specific_key": "base64:abc123..."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/admin/artisan/execute
    metadata:
      groupName: Admin
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Execute Artisan Command'
      description: |-
        VULNERABILITY 79: Unrestricted Laravel Artisan command execution.

        Allows execution of any Laravel Artisan command without authorization.
        Can run migrations, clear cache, generate keys, etc.
        Exposes full command output and error traces.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      command:
        name: command
        description: 'Artisan command name.'
        required: true
        example: 'migrate:fresh'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      parameters:
        name: parameters
        description: 'optional Command parameters.'
        required: false
        example:
          '--seed': true
          '--force': true
        type: object
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      command: 'migrate:fresh'
      parameters:
        '--seed': true
        '--force': true
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "command": "migrate:fresh",
            "parameters": {"--seed": true, "--force": true},
            "exit_code": 0,
            "output": "Dropped all tables successfully.\nMigration table created successfully.\nMigrating: 2024_01_01_000000_create_users_table\nMigrated:  2024_01_01_000000_create_users_table"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
            "success": false,
            "error": "Command not found",
            "trace": "Exception trace..."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
