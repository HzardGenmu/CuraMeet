## Autogenerated by Scribe. DO NOT MODIFY.

name: Authentication
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/auth/login
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'User Login'
      description: |-
        VULNERABILITY 25: No input validation, sanitization, or rate limiting.
        VULNERABILITY 1: SQL Injection vulnerability in login query.
        VULNERABILITY 3: Information disclosure in logs (password logged).
        VULNERABILITY 5: No rate limiting on login attempts.

        Authenticates user with email, password, and role.
        Returns user information and Bearer token.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'User email address.'
        required: true
        example: user@test.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'User password (plain text).'
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      role:
        name: role
        description: 'optional User role (patient, doctor, admin). Defaults to patient.'
        required: false
        example: patient
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      remember_me:
        name: remember_me
        description: 'optional Enable remember me functionality.'
        required: false
        example: false
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: user@test.com
      password: password123
      role: patient
      remember_me: false
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "user": {
              "id": 1,
              "name": "John Doe",
              "email": "user@test.com",
              "role": "patient"
            },
            "token": "abc123def456...",
            "token_type": "Bearer",
            "expires_in": 86400
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "success": false,
            "message": "Invalid credentials"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/register
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'User Registration'
      description: |-
        VULNERABILITY 26: Verbose error messages expose internal system information.

        Registers a new user (patient, doctor, or admin).
        Creates associated patient or doctor record based on role.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Full name of the user.'
        required: true
        example: 'John Doe'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'Email address (must be unique).'
        required: true
        example: newuser@test.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'Password (minimum 8 characters).'
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Password confirmation.'
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      role:
        name: role
        description: 'optional User role (patient, doctor, admin). Defaults to patient.'
        required: false
        example: |-
          patient

          For Patient (when role=patient):
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      NIK:
        name: NIK
        description: 'optional National ID number (max 20 chars, unique).'
        required: false
        example: '1234567890123456'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      full_name:
        name: full_name
        description: 'Full name for doctor record.'
        required: true
        example: 'Dr. Jane Smith'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      picture:
        name: picture
        description: 'optional Profile picture path.'
        required: false
        example: avatar.jpg
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      allergies:
        name: allergies
        description: 'optional Patient allergies.'
        required: false
        example: 'Peanuts, Dust'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      disease_histories:
        name: disease_histories
        description: 'optional Patient disease history.'
        required: false
        example: |-
          Asthma

          For Doctor (when role=doctor):
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      str_number:
        name: str_number
        description: 'Doctor registration number (unique).'
        required: true
        example: STR123456
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      specialist:
        name: specialist
        description: 'Medical specialization.'
        required: true
        example: Cardiology
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      polyclinic:
        name: polyclinic
        description: Polyclinic/Department.
        required: true
        example: Heart
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      available_time:
        name: available_time
        description: 'optional Available time schedule.'
        required: false
        example: '08:00-16:00'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'John Doe'
      email: newuser@test.com
      password: password123
      password_confirmation: password123
      role: |-
        patient

        For Patient (when role=patient):
      NIK: '1234567890123456'
      full_name: 'Dr. Jane Smith'
      picture: avatar.jpg
      allergies: 'Peanuts, Dust'
      disease_histories: |-
        Asthma

        For Doctor (when role=doctor):
      str_number: STR123456
      specialist: Cardiology
      polyclinic: Heart
      available_time: '08:00-16:00'
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "success": true,
            "message": "User registered successfully",
            "user_id": 1
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "success": false,
            "errors": [
              "The email has already been taken.",
              "The password confirmation does not match."
            ]
          }
        headers: []
        description: ''
        custom: []
      -
        status: 500
        content: |-
          {
            "success": false,
            "message": "Registration failed",
            "error": "SQLSTATE[23505]: Unique violation...",
            "trace": "#0 /var/www/html/app/Services/AuthService.php(123): ...",
            "file": "/var/www/html/app/Services/AuthService.php",
            "line": 123
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/password/reset
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Reset Password'
      description: |-
        VULNERABILITY 27: No authentication required for sensitive operations.
        VULNERABILITY 7: Weak password reset implementation.
        VULNERABILITY 9: Plain text password in email/logs.

        Allows anyone to reset any user's password without verification.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'Email of the user whose password to reset.'
        required: true
        example: user@test.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      new_password:
        name: new_password
        description: "optional New password (if not provided, defaults to 'temp123')."
        required: false
        example: newpassword123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: user@test.com
      new_password: newpassword123
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Password reset successful"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/email/check
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Check Email Availability'
      description: |-
        VULNERABILITY 18: User enumeration attack.
        Allows attackers to determine which emails are registered.

        Checks if an email address is already registered in the system.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'Email address to check.'
        required: true
        example: test@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: test@example.com
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "exists": true,
            "message": "Email already registered"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 200
        content: |-
          {
            "exists": false,
            "message": "Email available"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/auth/token/verify
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Verify Token'
      description: |-
        Checks if a token is valid and not expired.
        Returns user information if token is valid.
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {token}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "valid": true,
            "user": {
              "id": 1,
              "name": "John Doe",
              "email": "user@test.com",
              "role": "patient"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "success": false,
            "valid": false,
            "message": "Invalid or expired token"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "success": false,
            "message": "Token not provided"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/auth/user
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Current Authenticated User'
      description: |-
        Returns the currently authenticated user information.
        Supports authentication via Bearer token or session.
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {token}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "user": {
              "id": 1,
              "name": "John Doe",
              "email": "user@test.com",
              "role": "patient",
              "token": "abc123...",
              "expires_at": "2024-01-16 10:00:00"
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "success": false,
            "message": "Not authenticated"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/logout
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'User Logout'
      description: 'Logs out the user by invalidating their token and clearing session.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {token}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Logged out successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/token/refresh
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Refresh Token'
      description: |-
        Refreshes an existing token before it expires.
        Returns a new token with extended expiration (24 hours).
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {token}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "token": "new_abc123def456...",
            "token_type": "Bearer",
            "expires_in": 86400
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "success": false,
            "message": "Invalid or expired token"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "success": false,
            "message": "Token not provided"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/password/change
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Change Password'
      description: |-
        VULNERABILITY 19: No old password verification (weak implementation).

        Allows authenticated user to change their password.
        Requires authentication but doesn't verify old password properly.
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {token}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      old_password:
        name: old_password
        description: 'Current password.'
        required: true
        example: oldpassword123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      new_password:
        name: new_password
        description: 'New password.'
        required: true
        example: newpassword123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      old_password: oldpassword123
      new_password: newpassword123
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true,
            "message": "Password changed"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "success": false,
            "message": "Unauthorized"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/profile/update
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update User Profile'
      description: |-
        VULNERABILITY 22: No CSRF protection, allows role manipulation.

        Allows authenticated user to update their profile information.
        Vulnerable to privilege escalation through role manipulation.
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {token}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Updated name.'
        required: true
        example: 'Jane Doe'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: 'Updated email address.'
        required: true
        example: newemail@test.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      role:
        name: role
        description: 'optional Updated role (allows privilege escalation).'
        required: false
        example: admin
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'Jane Doe'
      email: newemail@test.com
      role: admin
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "success": true
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "success": false,
            "message": "Unauthorized"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
